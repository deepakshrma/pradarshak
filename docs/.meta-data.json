[
    {
        "index": 0,
        "name": "Functional Programing",
        "path": "functional-programing",
        "fullPath": "/Users/xdeepakv/github/pradarshak/docs/functional-programing",
        "docs": [
            {
                "index": 0,
                "name": "Functional Programing Basic",
                "path": "01-Functional Programing Basic.md",
                "fullPath": "/Users/xdeepakv/github/pradarshak/docs/functional-programing/01-Functional Programing Basic.md",
                "text": "\nclass: center, middle\n\n# Functional Programming- Basic\n![Lambda](static/images/lambda.png)\n\n### By: Deepak Vishwakarma\n\n---\n### Agenda:\n1. Introduction\n2. Basic Understanding: \n   1. Self-invoking functions and closures\n   2. Anonymous functions \n   3. Higher-order functions/ Pure functions\n   4. Method chains  \n3. The functional programmer‚Äôs toolkit \n   1. [Array].map.filter.reduce.concat.reverse.sort\n   2. [Array].forEach\n   3. [Array].every.some\n\n---\nclass: center, middle\n# Why ? Functional Programming\n\n![Lambda](static/images/why_fn.png)\n---\n# Introduction \n\n#### Benefits:\n1.  Functional style are clear.\n2.  Functional programming provides use of Lambda calculus  \n\n#### Cleaner code:  \n*Functional programs are cleaner, simpler, and smaller. This simplifies debugging, testing,\nand maintenance.*\n---\n### Imperative\n```js\n/**\n*Problem 1:Write a function that converts a two-dimensional array into a one-dimensional array.\n* */\t\nSolution 1: \nfunction mergeArraysIntoOne(arrays) {\n   var count = arrays.length;\n   var merged = [];\n   var c = 0;\n   for (var i = 0; i < count; ++i) {\n       for (var j = 0, jlen = arrays[i].length; j < jlen; ++j) {\n           merged[c++] = arrays[i][j];\n       }\n   }\n   return merged\n}\nconsole.log(\n   mergeArraysIntoOne(\n       [\n           [1, 4, 3],\n           [6, 7],\n           [2, 5]\n       ]\n   )\n)\n//output\n//[ 1, 4, 3, 6, 7, 2, 5 ]\n```\n---\n### Functional\n```js\nconst mergeArraysIntoOneF = (arrays) => \n  arrays.reduce((prev, next) => prev.concat(next), [])\n\nconsole.log(\n   mergeArraysIntoOneF(\n       [\n           [1, 4, 3],\n           [6, 7],\n           [2, 5]\n       ]\n   )\n)\n//output\n//[ 1, 4, 3, 6, 7, 2, 5 ]\n```\n---\nclass: center, middle\n# Oh Nice!! Tell me more about it\n![Tell Me](static/images/oh_nice.jpg)\n---\n\n## Is JavaScript a functional programming language?\n\n**What defines a functional programming language?**   \n1. A functional programming language is a language which enables programming in a functional style with higher order functions   \n2. A functional programming language is a language with first class functions    \n3. A functional programming language is a language with lambdas \n\n\n**[Final]**: A functional programming language is a language where you program only with pure functions and immutable data (no side effects)  \nReference: https://clojurefun.wordpress.com/2012/08/27/what-defines-a-functional-programming-language/  \n---\nclass: center, middle\n# Evaluation\n![Tell Me](static/images/evolve.png)\n---\n## Self-invoking functions and closures\n```js\n//Design pattern to follow\nvar module = (function () {\n    //private\n    return {\n        //public\n    }\n}());\n```\n```js\n// module.js\n\n// private here\nmodule.exports = {\n  //public here\n}\n\n```\n---\n```js\n// Using Closure/ Proxy from Java\nvar\n    obj1 = {value: 1},\n    obj2 = {value: 2};\nvar ValueAccumulator =  (values, object) => {\n    var values = [];\n    var accumulate = (obj) => {\n      if(typeof obj !== undefined) {\n        values.push(obj.value)  \n      }\n      return values;\n    }\n    return accumulate;\n};\n//This allows us to do this:\nvar accumulator = ValueAccumulator();\naccumulator(obj1);\naccumulator(obj2);\nconsole.log(accumulator());\n// Output: [obj1.value, obj2.value]\n```\n---\n##Anonymous functions    \n```js\nfunction powersOf(x) {\n    return function (y) {\n        // this is an anonymous function!\n        return Math.pow(x, y);\n    };\n} \npowerOfTwo = powersOf(2);\nconsole.log(powerOfTwo(1)); // 2\nconsole.log(powerOfTwo(2)); // 4\nconsole.log(powerOfTwo(3)); // 8\n```\n---\nclass: center, middle\n# Higher-order functions \n![Tell Me](static/images/fun_in_fun.png)\n---\n## Higher-order functions  \n>> Higher-order functions are functions that either take another \nfunction as the input or return a function as\nthe output.\n\n## Pure functions      \n>> Pure functions return a value computed using only the \n  inputs passed to it. Outside variables and global \n  states may not be used and there may be no side effects.\n---\nclass: center, middle\n# Pure Function\n![Tell Me](static/images/pure_fn.jpg)\n---\n\n## Method chains- Builder Pattern  \n```js\n//\tInstead\tof\tapplying\tthe\tfunctions\tone\tper\tline...\nvar arr = [1, 2, 3, 4],\n    arr1 = arr.reverse(),\n    arr2 = arr1.concat([5, 6]),\n    arr3 = arr2.map(Math.sqrt);\n\n//\t...they\tcan\tbe\tchained\ttogether\tinto\ta\tone-liner\nconsole.log([1, 2, 3, 4].reverse().concat([5, 6]).map(Math.sqrt));\n\n//\tparentheses\tmay\tbe\tused\tto\tillustrate\nconsole.log(\n    (\n        (\n            ([1, 2, 3, 4]).reverse()\n        ).concat([5, 6])\n    ).map(Math.sqrt)\n);\n```\n---\nclass: center, middle\n# Brace Yourself, Function is everywhere.. \n\n<br/>\n![Tell Me](static/images/brace.jpg)\n---\n## How to create builder\n**Return an array in javascript**   \n```js\n//Return an array in javascript\nArray.prototype.zip =  (callback = (data) => data) \n  => this.map(callback)\n\n//This would allow us to the following:\n\nvar arr = [4, 9, 16, 25];\nconsole.log(\n    arr.zip(function (data) {\n        return Math.sqrt(data, 2);\n    }).map(function (n) {\n        return n * 2\n    })\n);\n```\n---\n# The functional programmer‚Äôs toolkit   \n```js\n/**\n * [array] ==>{function(callback)} ==> [array]\n */\n```\n---\na) **Array.prototype.map()**  \n```js\n/*\n *Problem: Capitalize first character of word in a sentence\n */\nvar str = 'hello world how ya doing?';\n// Capitalize first character of word in a string.\nString.prototype.kebabCase = function () {\n    return this.split(' ')\n      .map( (s, i) => s.charAt(0).toUpperCase() + s.slice(1))\n      .join(' ')\n}\nconsole.log(\n    str.kebabCase()\n);\n```\n---\nb) **Array.prototype.filter()**  \n```js\n/*\n *Problem: Collect only valid emails\n */\nvar emails = [\n    'deepak@gmail.com',\n    'deepak@gmail.c',\n    'deepak1@gmail.co',\n    'deepak*@gmail.com',\n    'deepak+abc@gmail.in',\n];\nvar emailReg = /\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/;\nconsole.log(\n    emails.filter(email => emailReg.test(email))\n);\n```\n---\nc) **Array.prototype.reduce()**  \n```js\n/*\n *Problem: Find greatest among the given numbers\n */\nvar numbers = [1, 252, 56, 3636, 8, 1, -1];\n\nconsole.log(\n    numbers.reduce((p, n) => Math.max(p, n))\n);\n/*\n *Problem: Highest paid employee\n */\nvar employees = [\n    {name: 'deepak', salary: 1000, id: '1'},\n    {name: 'sanjay', salary: 1001, id: '2'},\n    {name: 'deepak', salary: 999, id: '3'}\n];\n\nconsole.log(\n    employees.reduce((p, n) => p.salary > n.salary ? p : n)\n);\n```\n---\nd)  Array.prototype.forEach  \ne)  Array.prototype.concat  \nf)  Array.prototype.reverse \ng)  Array.prototype.sort    \nh)  Array.prototype.every and Array.prototype.some  \n```js\n/*\n *Problem: Validate All user in json\n */\nvar {employees} = require('./../resource/empolyee');\nvar emailReg = /\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/;\nconst validate =  (employee) => emailReg.test(employee.email) && !isNaN(employee.age)\nconsole.log(\n    employees.every(validate)\n)\n/*\n *Problem: Validate some user in json\n */\nconsole.log(\n    employees.some(validate)\n);\n```\n---\nclass: center, middle\n# Say Again, Say that FP is easy :-D \n\n<br/>\n![Tell Me](static/images/it_is_easy.jpg)\n---\nclass: center, middle\n# I am Lazy, So i [üíô FP]\n---\nclass: center, middle\n\n# Thanks... üçªü•Ç"
            },
            {
                "index": 1,
                "name": "Functional Programing Basic",
                "path": "02-Functional Programing Basic.md",
                "fullPath": "/Users/xdeepakv/github/pradarshak/docs/functional-programing/02-Functional Programing Basic.md",
                "text": "class: center, middle\n# Why ? Functional Programming\n\n![Lambda](static/images/why_fn.png)\n---\n# Introduction \n\n#### Benefits:\n1.  Functional style are clear.\n2.  Functional programming provides use of Lambda calculus  \n\n#### Cleaner code:  \n*Functional programs are cleaner, simpler, and smaller. This simplifies debugging, testing,\nand maintenance.*\n---\n### Imperative\n```js\n/**\n*Problem 1:Write a function that converts a two-dimensional array into a one-dimensional array.\n* */\t\nSolution 1: \nfunction mergeArraysIntoOne(arrays) {\n   var count = arrays.length;\n   var merged = [];\n   var c = 0;\n   for (var i = 0; i < count; ++i) {\n       for (var j = 0, jlen = arrays[i].length; j < jlen; ++j) {\n           merged[c++] = arrays[i][j];\n       }\n   }\n   return merged\n}\nconsole.log(\n   mergeArraysIntoOne(\n       [\n           [1, 4, 3],\n           [6, 7],\n           [2, 5]\n       ]\n   )\n)\n//output\n//[ 1, 4, 3, 6, 7, 2, 5 ]\n```\n---\n### Functional\n```js\nconst mergeArraysIntoOneF = (arrays) => \n  arrays.reduce((prev, next) => prev.concat(next), [])\n\nconsole.log(\n   mergeArraysIntoOneF(\n       [\n           [1, 4, 3],\n           [6, 7],\n           [2, 5]\n       ]\n   )\n)\n//output\n//[ 1, 4, 3, 6, 7, 2, 5 ]\n```\n---\nclass: center, middle\n# Oh Nice!! Tell me more about it\n![Tell Me](static/images/oh_nice.jpg)\n---\n\n## Is JavaScript a functional programming language?\n\n**What defines a functional programming language?**   \n1. A functional programming language is a language which enables programming in a functional style with higher order functions   \n2. A functional programming language is a language with first class functions    \n3. A functional programming language is a language with lambdas \n\n\n**[Final]**: A functional programming language is a language where you program only with pure functions and immutable data (no side effects)  \nReference: https://clojurefun.wordpress.com/2012/08/27/what-defines-a-functional-programming-language/  \n---\nclass: center, middle\n# Evaluation\n![Tell Me](static/images/evolve.png)\n---\n## Self-invoking functions and closures\n```js\n//Design pattern to follow\nvar module = (function () {\n    //private\n    return {\n        //public\n    }\n}());\n```\n```js\n// module.js\n\n// private here\nmodule.exports = {\n  //public here\n}\n\n```\n---\n```js\n// Using Closure/ Proxy from Java\nvar\n    obj1 = {value: 1},\n    obj2 = {value: 2};\nvar ValueAccumulator =  (values, object) => {\n    var values = [];\n    var accumulate = (obj) => {\n      if(typeof obj !== undefined) {\n        values.push(obj.value)  \n      }\n      return values;\n    }\n    return accumulate;\n};\n//This allows us to do this:\nvar accumulator = ValueAccumulator();\naccumulator(obj1);\naccumulator(obj2);\nconsole.log(accumulator());\n// Output: [obj1.value, obj2.value]\n```\n---\n##Anonymous functions    \n```js\nfunction powersOf(x) {\n    return function (y) {\n        // this is an anonymous function!\n        return Math.pow(x, y);\n    };\n} \npowerOfTwo = powersOf(2);\nconsole.log(powerOfTwo(1)); // 2\nconsole.log(powerOfTwo(2)); // 4\nconsole.log(powerOfTwo(3)); // 8\n```\n---\nclass: center, middle\n# Higher-order functions \n![Tell Me](static/images/fun_in_fun.png)\n---\n## Higher-order functions  \n>> Higher-order functions are functions that either take another \nfunction as the input or return a function as\nthe output.\n\n## Pure functions      \n>> Pure functions return a value computed using only the \n  inputs passed to it. Outside variables and global \n  states may not be used and there may be no side effects.\n---\nclass: center, middle\n# Pure Function\n![Tell Me](static/images/pure_fn.jpg)\n---\n\n## Method chains- Builder Pattern  \n```js\n//\tInstead\tof\tapplying\tthe\tfunctions\tone\tper\tline...\nvar arr = [1, 2, 3, 4],\n    arr1 = arr.reverse(),\n    arr2 = arr1.concat([5, 6]),\n    arr3 = arr2.map(Math.sqrt);\n\n//\t...they\tcan\tbe\tchained\ttogether\tinto\ta\tone-liner\nconsole.log([1, 2, 3, 4].reverse().concat([5, 6]).map(Math.sqrt));\n\n//\tparentheses\tmay\tbe\tused\tto\tillustrate\nconsole.log(\n    (\n        (\n            ([1, 2, 3, 4]).reverse()\n        ).concat([5, 6])\n    ).map(Math.sqrt)\n);\n```\n---\nclass: center, middle\n# Brace Yourself, Function is everywhere.. \n\n<br/>\n![Tell Me](static/images/brace.jpg)\n---\n## How to create builder\n**Return an array in javascript**   \n```js\n//Return an array in javascript\nArray.prototype.zip =  (callback = (data) => data) \n  => this.map(callback)\n\n//This would allow us to the following:\n\nvar arr = [4, 9, 16, 25];\nconsole.log(\n    arr.zip(function (data) {\n        return Math.sqrt(data, 2);\n    }).map(function (n) {\n        return n * 2\n    })\n);\n```\n---\n# The functional programmer‚Äôs toolkit   \n```js\n/**\n * [array] ==>{function(callback)} ==> [array]\n */\n```\n---\na) **Array.prototype.map()**  \n```js\n/*\n *Problem: Capitalize first character of word in a sentence\n */\nvar str = 'hello world how ya doing?';\n// Capitalize first character of word in a string.\nString.prototype.kebabCase = function () {\n    return this.split(' ')\n      .map( (s, i) => s.charAt(0).toUpperCase() + s.slice(1))\n      .join(' ')\n}\nconsole.log(\n    str.kebabCase()\n);\n```\n---\nb) **Array.prototype.filter()**  \n```js\n/*\n *Problem: Collect only valid emails\n */\nvar emails = [\n    'deepak@gmail.com',\n    'deepak@gmail.c',\n    'deepak1@gmail.co',\n    'deepak*@gmail.com',\n    'deepak+abc@gmail.in',\n];\nvar emailReg = /\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/;\nconsole.log(\n    emails.filter(email => emailReg.test(email))\n);\n```\n---\nc) **Array.prototype.reduce()**  \n```js\n/*\n *Problem: Find greatest among the given numbers\n */\nvar numbers = [1, 252, 56, 3636, 8, 1, -1];\n\nconsole.log(\n    numbers.reduce((p, n) => Math.max(p, n))\n);\n/*\n *Problem: Highest paid employee\n */\nvar employees = [\n    {name: 'deepak', salary: 1000, id: '1'},\n    {name: 'sanjay', salary: 1001, id: '2'},\n    {name: 'deepak', salary: 999, id: '3'}\n];\n\nconsole.log(\n    employees.reduce((p, n) => p.salary > n.salary ? p : n)\n);\n```\n---\nd)  Array.prototype.forEach  \ne)  Array.prototype.concat  \nf)  Array.prototype.reverse \ng)  Array.prototype.sort    \nh)  Array.prototype.every and Array.prototype.some  \n```js\n/*\n *Problem: Validate All user in json\n */\nvar {employees} = require('./../resource/empolyee');\nvar emailReg = /\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/;\nconst validate =  (employee) => emailReg.test(employee.email) && !isNaN(employee.age)\nconsole.log(\n    employees.every(validate)\n)\n/*\n *Problem: Validate some user in json\n */\nconsole.log(\n    employees.some(validate)\n);\n```\n---\nclass: center, middle\n# Say Again, Say that FP is easy :-D \n\n<br/>\n![Tell Me](static/images/it_is_easy.jpg)\n---\nclass: center, middle\n# I am Lazy, So i [üíô FP]\n---\nclass: center, middle\n\n# Thanks... üçªü•Ç"
            }
        ]
    }
]